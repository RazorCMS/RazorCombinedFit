
import ROOT as rt
import sys
import RootTools
import glob
from math import *
import os
from array import *

def getFileName(mg, mchi, box, model, directory):
    hybridLimit = "higgsCombine"
    modelPoint = "MG_%f_MCHI_%f"%(mg,mchi)
    fileName = "%s/%s%s_%s_%s.Asymptotic.mH120.root"%(directory,hybridLimit,model,modelPoint,box)
    return fileName


def getGChiPairs(model):
    if model=="T1bbbb":
        gchipairs = [(400, 50), (400, 200), (400, 300),
                     (450, 50), (450, 200), (450, 300), (450, 400),
                     (500, 50), (500, 200), (500, 300), (500, 400), (500, 450), 
                     (550, 50), (550, 200), (550, 300), (550, 400), (550, 450), (550, 500),
                     (600, 50), (600, 200), (600, 300), (600, 400), (600, 450), (600, 500), (600, 550),
                     (650, 50), (650, 200), (650, 300), (650, 400), (650, 450), (650, 500), (650, 550), (650, 600),
                     (700, 50), (700, 200), (700, 300), (700, 400), (700, 450), (700, 500), (700, 550), (700, 600), (700, 650),
                     (750, 200), (750, 300), (750, 400), (750, 450), (750, 500), (750, 550), (750, 600), (750, 650), (750, 700),
                     (775, 50), (775, 200), (775, 300), (775, 400), (775, 450), (775, 500), (775, 525), (775, 550), (775, 600), (775, 625), (775, 650), (775, 700), (775, 750),
                     (800, 550), (800, 600), (800, 650), (800, 700),
                     (825, 50), (825, 200), (825, 300), (825, 400), (825, 450), (825, 500), (825, 525), (825, 550), (825, 600), (825, 625), (825, 650), (825, 700), (825, 750), (825, 800),
                     (850, 550), (850, 600), (850, 650), (850, 700), 
                     (875, 50), (875, 200), (875, 300), (875, 400), (875, 450), (875, 500), (875, 525), (875, 550), (875, 600), (875, 625), (875, 650), (875, 700), (875, 750), (875, 800), (875, 850),
                     (900, 550), (900, 600), (900, 650),
                     (925, 50), (925, 200), (925, 300), (925, 400), (925, 450), (925, 500), (925, 525), (925, 550), (925, 600), (925, 625), (925, 650), (925, 700), (925, 750), (925, 800), (925, 850), (925, 875), (925, 900),
                     (950, 525), (950, 550), (950, 600), (950, 625), (950, 650), (950, 700), (950, 750), (950, 800), (950, 850), (950, 900), (950, 925),
                     (1000, 525), (1000, 550), (1000, 600), (1000, 625), (1000, 650), (1000, 700), (1000, 750), (1000, 800), (1000, 850),  (1000, 900), (1000, 950), (1000, 975),
                     (1025, 50), (1025, 200), (1025, 300), (1025, 400), (1025, 450), (1025, 500), (1025, 525), (1025, 550), (1025, 600), (1025, 625), (1025, 650), (1025, 700), (1025, 750), (1025, 800), (1025, 850), (1025, 900), (1025, 950), (1025, 1000),
                     (1050, 550), (1050, 600), (1050, 650), (1050, 700), (1050, 750), (1050, 800), (1050, 825), (1050, 850), (1050, 900), (1050, 950), (1050, 1000), (1050, 1025),
                     (1075, 50), (1075, 200), (1075, 300), (1075, 400), (1075, 450), (1075, 500), (1075, 525), (1075, 550), (1075, 600), (1075, 625), (1075, 650), (1075, 700), (1075, 750), (1075, 800), (1075, 850), (1075, 900), (1075, 950),  (1075, 1000),  (1075, 1050),
                     (1100, 550), (1100, 600), (1100, 650), (1100, 700), (1100, 750), (1100, 800), (1100, 850), (1100, 900), (1100, 950), (1100, 1000), (1100, 1050), (1100, 1075),
                     (1125, 50), (1125, 200), (1125, 300), (1125, 400), (1125, 450), (1125, 500), (1125, 525), (1125, 550), (1125, 600), (1125, 625), (1125, 650), (1125, 700), (1125, 750), (1125, 800), (1125, 850), (1125, 900), (1125, 950), (1125, 1000), (1125, 1050), (1125, 1100),
                     (1150, 550), (1150, 600), (1150, 650), (1150, 700), (1150, 750), (1150, 800), (1150, 850),
                     (1225, 50), (1225, 200), (1225, 300), (1225, 400), (1225, 450), (1225, 500), (1225, 525), (1225, 550), (1225, 600), (1225, 625), (1225, 650), (1225, 700), (1225, 750), (1225, 800), (1225, 850), (1225, 900), (1225, 950), (1225, 1000), (1225, 1050), (1225, 1100), (1225, 1150), (1225, 1200), 
                     (1275, 50), (1275, 200), (1275, 300), (1275, 400), (1275, 450), (1275, 500), (1275, 525), (1275, 550), (1275, 600), (1275, 625), (1275, 650), (1275, 700), (1275, 750), (1275, 800), (1275, 850), (1275, 900), (1275, 950), (1275, 1000), (1275, 1050), (1275, 1100), (1275, 1150), (1275, 1200), (1275, 1250),
                     (1325, 50), (1325, 200), (1325, 300), (1325, 400), (1325, 450), (1325, 500), (1325, 525), (1325, 550), (1325, 600), (1325, 625), (1325, 650), (1325, 700), (1325, 750), (1325, 800), (1325, 850), (1325, 900), (1325, 950), (1325, 1000), (1325, 1050), (1325, 1100), (1325, 1150), (1325, 1200), (1325, 1250), (1325, 1300),
                     (1375, 50), (1375, 200), (1375, 300), (1375, 400), (1375, 450), (1375, 500), (1375, 525), (1375, 550), (1375, 600), (1375, 625), (1375, 650), (1375, 700), (1375, 750), (1375, 800), (1375, 850), (1375, 900), (1375, 950), (1375, 1000), (1375, 1050), (1375, 1100), (1375, 1150), (1375, 1200), (1375, 1250), (1375, 1300), (1375, 1350)]


    if model=="T2tt":
        gchipairs = [(150, 25), (150, 50),
                     (200, 25), (200, 50), (200, 100),
                     (250, 25), (250, 50), (250, 100), (250, 150),
                     (300, 25), (300, 50), (300, 100), (300, 150), (300, 200),
                     (350, 25), (350, 50), (350, 100), (350, 150), (350, 200), (350, 250),
                     (400, 25), (400, 50), (400, 100), (400, 150), (400, 200), (400, 250), (400, 300),
                     (450, 25), (450, 50), (450, 100), (450, 150), (450, 200), (450, 250), (450, 300), (450, 350),
                     (500, 25), (500, 50), (500, 100), (500, 150), (500, 200), (500, 250), (500, 300), (500, 350), (500, 400),
                     (550, 25), (550, 50), (550, 100), (550, 150), (550, 200), (550, 250), (550, 300), (550, 350), (550, 400), (550, 450),
                     (600, 25), (600, 50), (600, 100), (600, 150), (600, 200), (600, 250), (600, 300), (600, 350), (600, 400), (600, 450), (600, 500),
                     (650, 25), (650, 50), (650, 100), (650, 150), (650, 200), (650, 250), (650, 300), (650, 350), (650, 400), (650, 450), (650, 500), (650, 550),
                     (700, 25), (700, 50), (700, 100), (700, 150), (700, 200), (700, 250), (700, 300), (700, 350), (700, 400), (700, 450), (700, 500), (700, 550), (700, 600),
                     (750, 25), (750, 50), (750, 100), (750, 150), (750, 200), (750, 250), (750, 300), (750, 350), (750, 400), (750, 450), (750, 500), (750, 550), (750, 600), (750, 650),
                     (800, 25), (800, 50), (800, 100), (800, 150), (800, 200), (800, 250), (800, 300), (800, 350), (800, 400), (800, 450), (800, 500), (800, 550), (800, 600), (800, 650), (800, 700)]
        
    if model=="T1tttt":
        gchipairs = [(400, 1), (400, 25), (400, 75), (400, 125), (400, 175),
                     (450, 1), (450, 25), (450, 75), (450, 125), (450, 175), (450, 225),
                     (500, 1), (500, 25), (500, 75), (500, 125), (500, 175), (500, 225), (500, 275),
                     (550, 1), (550, 25), (550, 75), (550, 125), (550, 175), (550, 225), (550, 275), (550, 325),
                     (600, 1), (600, 25), (600, 75), (600, 125), (600, 175), (600, 225), (600, 275), (600, 325), (600, 375),
                     (650, 1), (650, 25), (650, 75), (650, 125), (650, 175), (650, 225), (650, 275), (650, 325), (650, 375), (650, 425),
                     (700, 1), (700, 25), (700, 75), (700, 125), (700, 175), (700, 225), (700, 275), (700, 325), (700, 375), (700, 425), (700, 475),
                     (750, 1), (750, 25), (750, 75), (750, 125), (750, 175), (750, 225), (750, 275), (750, 325), (750, 375), (750, 425), (750, 475), (750, 525),
                     (775, 25), (775, 75), (775, 125), (775, 175), (775, 225), (775, 275), (775, 325), (775, 375), (775, 425), (775, 475), (775, 525), (775, 575),
                     (800, 1),
                     (825, 75), (825, 125), (825, 175), (825, 225), (825, 275), (825, 325), (825, 375), (825, 425), (825, 475), (825, 525), (825, 575), (825, 625),
                     (850, 1), (875, 25), (875, 75), (875, 125), (875, 175), (875, 225), (875, 275), (875, 325), (875, 375), (875, 425), (875, 475), (875, 525), (875, 575), (875, 625), (875, 675),
                     (900, 1),
                     (925, 75), (925, 125), (925, 175), (925, 225), (925, 275), (925, 325), (925, 375), (925, 425), (925, 475), (925, 525), (925, 575), (925, 625), (925, 675), (925, 725),
                     (950, 1),
                     (975, 75), (975, 125), (975, 175), (975, 225), (975, 275), (975, 325), (975, 375), (975, 425), (975, 475), (975, 525), (975, 575), (975, 625), (975, 675), (975, 725), (975, 775),
                     (1000, 1),
                     (1025, 75), (1025, 125), (1025, 175), (1025, 225), (1025, 275), (1025, 325), (1025, 375), (1025, 425), (1025, 475), (1025, 525), (1025, 575), (1025, 625), (1025, 675), (1025, 725), (1025, 775), (1025, 825),
                     (1050, 1),
                     (1075, 75), (1075, 125), (1075, 175), (1075, 225), (1075, 275), (1075, 325), (1075, 375), (1075, 425), (1075, 475), (1075, 525), (1075, 575), (1075, 625), (1075, 675), (1075, 725), (1075, 775), (1075, 825), (1075, 875),
                     (1100, 1), (1100, 75), (1100, 125), (1100, 175), (1100, 225), (1100, 275), (1100, 325), (1100, 375), (1100, 425), (1100, 475), (1100, 525), (1100, 575), (1100, 625), (1100, 675), (1100, 725), (1100, 775), (1100, 825), (1100, 875), (1100, 900),
                     (1150, 1), (1150, 75), (1150, 125), (1150, 175), (1150, 225), (1150, 275), (1150, 325), (1150, 375), (1150, 425), (1150, 475), (1150, 525), (1150, 575), (1150, 625), (1150, 675), (1150, 725), (1150, 775), (1150, 825), (1150, 875), (1150, 925), (1150, 950),
                     (1200, 1), (1200, 25), (1200, 75), (1200, 125), (1200, 175), (1200, 225), (1200, 275), (1200, 325), (1200, 375), (1200, 425), (1200, 475), (1200, 525), (1200, 575), (1200, 625), (1200, 675), (1200, 725), (1200, 775), (1200, 825), (1200, 875), (1200, 925), (1200, 975), (1200, 1000),
                     (1250, 1), (1250, 75), (1250, 125), (1250, 175), (1250, 225), (1250, 275), (1250, 325), (1250, 375), (1250, 425), (1250, 475), (1250, 525), (1250, 575), (1250, 625),(1250, 675), (1250, 725), (1250, 775), (1250, 825), (1250, 875), (1250, 925), (1250, 975), (1250, 1025),
                     (1300, 1), (1300, 75), (1300, 125), (1300, 175), (1300, 225), (1300, 275), (1300, 325), (1300, 375), (1300, 425), (1300, 475), (1300, 525), (1300, 575), (1300, 625), (1300, 675), (1300, 725), (1300, 775), (1300, 825), (1300, 875), (1300, 925), (1300, 975), (1300, 1025), (1300, 1075),
                     (1350, 1), (1350, 75), (1350, 125), (1350, 175), (1350, 225), (1350, 275), (1350, 325), (1350, 375), (1350, 425), (1350, 475), (1350, 525), (1350, 575), (1350, 625), (1350, 675), (1350, 725), (1350, 775), (1350, 825), (1350, 875), (1350, 925), (1350, 975), (1350, 1025), (1350, 1075), (1350, 1125),
                     (1400, 1), (1400, 75), (1400, 125), (1400, 175), (1400, 225), (1400, 275), (1400, 325), (1400, 375), (1400, 425), (1400, 475), (1400, 525), (1400, 575), (1400, 625), (1400, 675), (1400, 725), (1400, 775), (1400, 825), (1400, 875), (1400, 925), (1400, 975), (1400, 1025), (1400, 1075), (1400, 1125), (1400, 1175)]

        
    if model=="T6bbHH":
        gchipairs = [(325, 25),
                     (350, 25), (350, 50),
                     (375, 25), (375, 50), (375, 75),
                     (400, 25), (400, 50), (400, 75), (400, 100),
                     (425, 25), (425, 50), (425, 75), (425, 100), (425, 125),
                     (450, 25), (450, 50), (450, 75), (450, 100), (450, 125), (450, 150),
                     (475, 25), (475, 50), (475, 75), (475, 100), (475, 125), (475, 150), (475, 175),
                     (500, 25), (500, 50), (500, 75), (500, 100), (500, 125), (500, 150), (500, 175), (500, 200),
                     (525, 25), (525, 50), (525, 75), (525, 100), (525, 125), (525, 150), (525, 175), (525, 200), (525, 225),
                     (550, 25), (550, 50), (550, 75), (550, 100), (550, 125), (550, 150), (550, 175), (550, 200), (550, 225), (550, 250),
                     (575, 25), (575, 50), (575, 75), (575, 100), (575, 125), (575, 150), (575, 175), (575, 200), (575, 225), (575, 250), (575, 275),
                     (600, 25), (600, 50), (600, 75), (600, 100), (600, 125), (600, 150), (600, 175), (600, 200), (600, 225), (600, 250), (600, 275), (600, 300),
                     (625, 25), (625, 50), (625, 75), (625, 100), (625, 125), (625, 150), (625, 175), (625, 200), (625, 225), (625, 250), (625, 275), (625, 300), (625, 325),
                     (650, 25), (650, 50), (650, 75), (650, 100), (650, 125), (650, 150), (650, 175), (650, 200), (650, 225), (650, 250), (650, 275), (650, 300), (650, 325), (650, 350),
                     (675, 25), (675, 50), (675, 75), (675, 100), (675, 150), (675, 225), (675, 250), (675, 275), (675, 300), (675, 325), (675, 350), (675, 375),
                     (700, 25), (700, 50), (700, 75), (700, 100), (700, 125), (700, 150), (700, 175), (700, 200), (700, 225), (700, 250), (700, 275), (700, 300), (700, 325), (700, 350), (700, 375), (700, 400)]
        
    
    if model=="T2bb":
        gchipairs = [(100, 1), (100, 50), (100, 90), 
                     (125, 1), (125, 50), (125, 100), (125, 115), 
                     (150, 1), (150, 50), (150, 100), (150, 140), 
                     (175, 1), (175, 50), (175, 100), (175, 150), (175, 165), 
                     (200, 1), (200, 50), (200, 100), (200, 150), (200, 190), 
                     (225, 1), (225, 50), (225, 100), (225, 150), (225, 200), #(225, 215), 
                     (250, 1), (250, 50), (250, 100), (250, 150), (250, 200), (250, 240), 
                     (275, 1), (275, 50), (275, 100), (275, 150), (275, 200), (275, 250), #(275, 265), 
                     (300, 1), (300, 50), (300, 100), (300, 150), (300, 200), (300, 250), (300, 290), 
                     (325, 1), (325, 50), (325, 100), (325, 150), (325, 200), (325, 250), (325, 300), #(325, 315), 
                     (350, 1), (350, 50), (350, 100), (350, 150), (350, 200), (350, 250), (350, 300), (350, 340), 
                     (375, 1), (375, 50), (375, 100), (375, 150), (375, 200), (375, 250), (375, 300), (375, 350), #(375, 365), 
                     (400, 1), (400, 50), (400, 100), (400, 150), (400, 200), (400, 250), (400, 300), (400, 350), (400, 390), 
                     (425, 1), (425, 50), (425, 100), (425, 150), (425, 200), (425, 250), (425, 300), (425, 350), (425, 400), #(425, 415), 
                     (450, 1), (450, 50), (450, 100), (450, 150), (450, 200), (450, 250), (450, 300), (450, 350), (450, 400), (450, 440), 
                     (475, 1), (475, 50), (475, 100), (475, 150), (475, 200), (475, 250), (475, 300), (475, 350), (475, 400), (475, 450), #(475, 465), 
                     (500, 1), (500, 50), (500, 100), (500, 150), (500, 200), (500, 250), (500, 300), (500, 350), (500, 400), (500, 450), (500, 490), 
                     (525, 1), (525, 50), (525, 100), (525, 150), (525, 200), (525, 250), (525, 300), (525, 350), (525, 400), (525, 450), (525, 500), #(525, 515), 
                     (550, 1), (550, 50), (550, 100), (550, 150), (550, 200), (550, 250), (550, 300), (550, 350), (550, 400), (550, 450), (550, 500), (550, 540), 
                     (575, 1), (575, 50), (575, 100), (575, 150), (575, 200), (575, 250), (575, 300), (575, 350), (575, 400), (575, 450), (575, 500), (575, 550), #(575, 565), 
                     (600, 1), (600, 50), (600, 100), (600, 150), (600, 200), (600, 250), (600, 300), (600, 350), (600, 400), (600, 450), (600, 500), (600, 550), (600, 590), 
                     (625, 1), (625, 50), (625, 100), (625, 150), (625, 200), (625, 250), (625, 300), (625, 350), (625, 400), (625, 450), (625, 500), (625, 550), (625, 600), #(625, 615), 
                     (650, 1), (650, 50), (650, 100), (650, 150), (650, 200), (650, 250), (650, 300), (650, 350), (650, 400), (650, 450), (650, 500), (650, 550), (650, 600), (650, 640), 
                     (675, 1), (675, 50), (675, 100), (675, 150), (675, 200), (675, 250), (675, 300), (675, 350), (675, 400), (675, 450), (675, 500), (675, 550), (675, 600), (675, 650), #(675, 665), 
                     (700, 1), (700, 50), (700, 100), (700, 150), (700, 200), (700, 250), (700, 300), (700, 350), (700, 400), (700, 450), (700, 500), (700, 550), (700, 600), (700, 650), (700, 690), 
                     (725, 1), (725, 50), (725, 100), (725, 150), (725, 200), (725, 250), (725, 300), (725, 350), (725, 400), (725, 450), (725, 500), (725, 550), (725, 600), (725, 650), (725, 700), #(725, 715), 
                     (750, 1), (750, 50), (750, 100), (750, 150), (750, 200), (750, 250), (750, 300), (750, 350), (750, 400), (750, 450), (750, 500), (750, 550), (750, 600), (750, 650), (750, 700), (750, 740), 
                     (775, 1), (775, 50), (775, 100), (775, 150), (775, 200), (775, 250), (775, 300), (775, 350), (775, 400), (775, 450), (775, 500), (775, 550), (775, 600), (775, 650), (775, 700), (775, 750), #(775, 765), 
                     (825, 1), (825, 25), (825, 50), (825, 75), (825, 100), (825, 125), (825, 150), (825, 175), (825, 200), (825, 225), (825, 250), (825, 275), (825, 300), (825, 325), (825, 350), (825, 375), (825, 400), (825, 425), (825, 450), (825, 475), (825, 500), (825, 525), (825, 550), (825, 575), (825, 600), (825, 625), (825, 650), (825, 675), (825, 700), (825, 725), (825, 750), (825, 775), (825, 800), 
                     (825, 1), (825, 50), (825, 100), (825, 150), (825, 200), (825, 250), (825, 300),  (825, 350), (825, 400), (825, 450), (825, 500), (825, 550), (825, 600), (825, 650), (825, 700), (825, 750), (825, 800), 
                     (850, 1), (850, 25), (850, 50), (850, 75), (850, 100), (850, 125), (850, 150), (850, 175), (850, 200), (850, 225), (850, 250), (850, 275), (850, 300), (850, 325), (850, 350), (850, 375), (850, 400), (850, 425), (850, 450), (850, 475), (850, 500), (850, 525), (850, 550), (850, 575), (850, 600), (850, 625), (850, 650), (850, 675), (850, 700), (850, 725), (850, 750), (850, 775), (850, 800), (850, 825), 
                     (850, 1), (850, 50), (850, 100), (850, 150), (850, 200), (850, 250), (850, 300), (850, 350), (850, 400), (850, 450), (850, 500), (850, 550), (850, 600), (850, 650), (850, 700), (850, 750), (850, 800), (850, 825), 
                     (875, 1), (875, 25), (875, 50), (875, 75), (875, 100), (875, 125), (875, 150), (875, 175), (875, 200), (875, 225), (875, 250), (875, 275), (875, 300), (875, 325), (875, 350), (875, 375), (875, 400), (875, 425), (875, 450), (875, 475), (875, 500), (875, 525), (875, 550), (875, 575), (875, 600), (875, 625), (875, 650), (875, 675), (875, 700), (875, 725), (875, 750), (875, 775), (875, 800), (875, 825), (875, 850), 
                     (900, 1), (900, 25), (900, 50), (900, 75), (900, 100), (900, 125), (900, 150), (900, 175), (900, 200), (900, 225), (900, 250), (900, 275), (900, 300), (900, 325), (900, 350), (900, 375), (900, 400), (900, 425), (900, 450), (900, 475), (900, 500), (900, 525), (900, 550), (900, 575), (900, 600), (900, 625), (900, 650), (900, 675), (900, 700), (900, 725), (900, 750), (900, 775), (900, 800), (900, 825), (900, 850), (900, 875), 
                     (900, 1), (900, 50), (900, 100),  (900, 150), (900, 200), (900, 250), (900, 300), (900, 350),  (900, 400), (900, 450), (900, 500), (900, 550), (900, 600), (900, 650), (900, 700), (900, 750), (900, 800), (900, 850), (900, 875), 
                     (925, 1), (925, 25), (925, 50), (925, 75), (925, 100), (925, 125), (925, 150), (925, 175), (925, 200), (925, 225), (925, 250), (925, 275), (925, 300), (925, 325), (925, 350), (925, 375), (925, 400), (925, 425), (925, 450), (925, 475), (925, 500), (925, 525), (925, 550), (925, 575), (925, 600), (925, 625), (925, 650), (925, 675), (925, 700), (925, 725), (925, 750), (925, 775), (925, 800), (925, 825), (925, 850), (925, 875), (925, 900), 
                     (950, 1), (950, 25), (950, 50), (950, 75), (950, 100), (950, 125), (950, 150), (950, 175), (950, 200), (950, 225), (950, 250), (950, 275), (950, 300), (950, 325), (950, 350), (950, 375), (950, 400), (950, 425), (950, 450), (950, 475), (950, 500), (950, 525), (950, 550), (950, 575), (950, 600), (950, 625), (950, 650), (950, 675), (950, 700), (950, 725), (950, 750), (950, 775), (950, 800), (950, 825), (950, 850), (950, 875), (950, 900), (950, 925), 
                     (950, 1), (950, 50), (950, 100), (950, 150), (950, 200), (950, 250), (950, 300), (950, 350), (950, 400), (950, 450), (950, 500), (950, 550), (950, 600), (950, 650), (950, 700), (950, 750), (950, 800), (950, 850), (950, 900), (950, 925), 
                     (975, 1), (975, 25), (975, 50), (975, 75), (975, 100), (975, 125), (975, 150), (975, 175), (975, 200), (975, 225), (975, 250), (975, 275), (975, 300), (975, 325), (975, 350), (975, 375), (975, 400), (975, 425), (975, 450), (975, 475), (975, 500), (975, 525), (975, 550), (975, 575), (975, 600), (975, 625), (975, 650), (975, 675), (975, 700), (975, 725), (975, 750), (975, 775), (975, 800), (975, 825), (975, 850), (975, 875), (975, 900), (975, 925), (975, 950), 
                     (1000, 1), (1000, 50), (1000, 100), (1000, 150), (1000, 200), (1000, 250), (1000, 300), (1000, 350), (1000, 400), (1000, 450), (1000, 500), (1000, 550), (1000, 600), (1000, 650), (1000, 700), (1000, 750), (1000, 800), (1000, 850), (1000, 900), (1000, 950), (1000, 975)]

    return gchipairs


def writeXsecTree(box, directory, mg, mchi, xsecULObs, xsecULExpPlus2, xsecULExpPlus, xsecULExp, xsecULExpMinus, xsecULExpMinus2):
    outputFileName = "%s/xsecUL_mg_%s_mchi_%s_%s.root" %(directory, mg, mchi, '_'.join(boxes))
    print "INFO: xsec UL values being written to %s"%outputFileName
    fileOut = rt.TFile.Open(outputFileName, "recreate")
    
    xsecTree = rt.TTree("xsecTree", "xsecTree")
    myStructCmd = "struct MyStruct{Double_t mg;Double_t mchi;"
    ixsecUL = 0
    myStructCmd+= "Double_t xsecUL%i;"%(ixsecUL+0)
    myStructCmd+= "Double_t xsecUL%i;"%(ixsecUL+1)
    myStructCmd+= "Double_t xsecUL%i;"%(ixsecUL+2)
    myStructCmd+= "Double_t xsecUL%i;"%(ixsecUL+3)
    myStructCmd+= "Double_t xsecUL%i;"%(ixsecUL+4)
    myStructCmd+= "Double_t xsecUL%i;"%(ixsecUL+5)
    ixsecUL+=6
    myStructCmd += "}"
    rt.gROOT.ProcessLine(myStructCmd)
    from ROOT import MyStruct

    s = MyStruct()
    xsecTree.Branch("mg", rt.AddressOf(s,"mg"),'mg/D')
    xsecTree.Branch("mchi", rt.AddressOf(s,"mchi"),'mchi/D')
    
    s.mg = mg
    s.mchi = mchi
    
    ixsecUL = 0
    xsecTree.Branch("xsecULObs_%s"%box, rt.AddressOf(s,"xsecUL%i"%(ixsecUL+0)),'xsecUL%i/D'%(ixsecUL+0))
    xsecTree.Branch("xsecULExpPlus2_%s"%box, rt.AddressOf(s,"xsecUL%i"%(ixsecUL+1)),'xsecUL%i/D'%(ixsecUL+1))
    xsecTree.Branch("xsecULExpPlus_%s"%box, rt.AddressOf(s,"xsecUL%i"%(ixsecUL+2)),'xsecUL%i/D'%(ixsecUL+2))
    xsecTree.Branch("xsecULExp_%s"%box, rt.AddressOf(s,"xsecUL%i"%(ixsecUL+3)),'xsecUL%i/D'%(ixsecUL+3))
    xsecTree.Branch("xsecULExpMinus_%s"%box, rt.AddressOf(s,"xsecUL%i"%(ixsecUL+4)),'xsecUL%i/D'%(ixsecUL+4))
    xsecTree.Branch("xsecULExpMinus2_%s"%box, rt.AddressOf(s,"xsecUL%i"%(ixsecUL+5)),'xsecUL%i/D'%(ixsecUL+5))
    exec 's.xsecUL%i = xsecULObs[ixsecUL]'%(ixsecUL+0)
    exec 's.xsecUL%i = xsecULExpPlus2[ixsecUL]'%(ixsecUL+1)
    exec 's.xsecUL%i = xsecULExpPlus[ixsecUL]'%(ixsecUL+2)
    exec 's.xsecUL%i = xsecULExp[ixsecUL]'%(ixsecUL+3)
    exec 's.xsecUL%i = xsecULExpMinus[ixsecUL]'%(ixsecUL+4)
    exec 's.xsecUL%i = xsecULExpMinus2[ixsecUL]'%(ixsecUL+5)
    ixsecUL += 4

    xsecTree.Fill()

    fileOut.cd()
    xsecTree.Write()
    
    fileOut.Close()
    
    return outputFileName

if __name__ == '__main__':

    boxInput = sys.argv[1]
    model = sys.argv[2]
    directory = sys.argv[3]


    gchipairs = getGChiPairs(model)
        
    boxes = boxInput.split("_")

    #output = rt.TFile.Open("%s/combine_%s_%s.root"%(directory,model,boxInput),"RECREATE")
    #rt.TTree("combine","combine")

    for mg, mchi in gchipairs:
        if not glob.glob(getFileName(mg,mchi,boxInput,model,directory)): continue
        tFile = rt.TFile.Open(getFileName(mg,mchi,boxInput,model,directory))
        limit = tFile.Get("limit")
        
        limit.Draw('>>elist','','entrylist')
        elist = rt.gDirectory.Get('elist')
        entry = elist.Next()
        limit.GetEntry(entry)

        limits = []
        while True:
            if entry == -1: break
            limit.GetEntry(entry)
            limits.append(1e-3*limit.limit)
            
            entry = elist.Next()
        if len(limits) < 6: continue
        
        print mg, mchi
        print limits
        limits.reverse()
        

        writeXsecTree(boxInput, directory, mg, mchi, [limits[0]],[limits[1]],[limits[2]],[limits[3]],[limits[4]],[limits[5]])
